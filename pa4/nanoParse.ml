type token =
  | Num of (int)
  | Id of (string)
  | TRUE
  | FALSE
  | EOF
  | LET
  | LBRAC
  | SEMI
  | RBRAC
  | COLONCOLON
  | REC
  | EQ
  | IN
  | FUN
  | ARROW
  | IF
  | THEN
  | ELSE
  | BIN
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LT
  | LE
  | NE
  | AND
  | OR
  | LPAREN
  | RPAREN

open Parsing;;
let _ = parse_error;;
# 2 "nanoParse.mly"
(* See this for a tutorial on ocamlyacc 
 * http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ *)
open Nano 
# 40 "nanoParse.ml"
let yytransl_const = [|
  259 (* TRUE *);
  260 (* FALSE *);
    0 (* EOF *);
  261 (* LET *);
  262 (* LBRAC *);
  263 (* SEMI *);
  264 (* RBRAC *);
  265 (* COLONCOLON *);
  266 (* REC *);
  267 (* EQ *);
  268 (* IN *);
  269 (* FUN *);
  270 (* ARROW *);
  271 (* IF *);
  272 (* THEN *);
  273 (* ELSE *);
  274 (* BIN *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* MUL *);
  278 (* DIV *);
  279 (* LT *);
  280 (* LE *);
  281 (* NE *);
  282 (* AND *);
  283 (* OR *);
  284 (* LPAREN *);
  285 (* RPAREN *);
    0|]

let yytransl_block = [|
  257 (* Num *);
  258 (* Id *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\003\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
\005\000\005\000\005\000\005\000\006\000\006\000\006\000\007\000\
\007\000\007\000\008\000\008\000\009\000\009\000\009\000\009\000\
\009\000\000\000"

let yylen = "\002\000\
\006\000\007\000\006\000\004\000\001\000\003\000\001\000\003\000\
\001\000\003\000\003\000\003\000\003\000\001\000\004\000\002\000\
\003\000\003\000\002\000\001\000\003\000\003\000\001\000\003\000\
\003\000\001\000\002\000\001\000\001\000\001\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\029\000\030\000\031\000\032\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\001\000\000\000\003\000\002\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000"

let yysindex = "\003\000\
\007\255\000\000\000\000\000\000\000\000\000\000\004\255\015\255\
\005\255\007\255\007\255\000\000\244\254\010\255\021\255\059\255\
\006\255\034\255\061\255\000\000\031\255\046\255\000\000\064\255\
\044\255\053\255\050\255\048\255\048\255\048\255\048\255\048\255\
\048\255\048\255\000\000\048\255\061\255\061\255\061\255\061\255\
\000\000\007\255\049\255\048\255\007\255\007\255\000\000\010\255\
\021\255\059\255\059\255\059\255\059\255\059\255\059\255\034\255\
\034\255\061\255\061\255\068\255\007\255\059\255\000\000\065\255\
\007\255\069\255\007\255\000\000\007\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\142\000\083\001\057\001\158\000\
\139\000\070\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\091\001\
\065\001\177\000\196\000\215\000\234\000\253\000\016\001\093\000\
\116\000\024\000\047\000\000\000\000\000\037\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\248\255\000\000\055\000\056\000\253\255\000\000\037\000\038\000\
\237\255"

let yytablesize = 632
let yytable = "\041\000\
\026\000\026\000\027\000\001\000\024\000\021\000\025\000\003\000\
\004\000\005\000\006\000\007\000\008\000\022\000\028\000\003\000\
\004\000\005\000\006\000\009\000\008\000\010\000\023\000\024\000\
\037\000\038\000\050\000\051\000\052\000\053\000\054\000\030\000\
\055\000\060\000\011\000\029\000\063\000\064\000\041\000\041\000\
\062\000\042\000\011\000\031\000\032\000\033\000\025\000\043\000\
\003\000\004\000\005\000\006\000\066\000\008\000\039\000\040\000\
\068\000\045\000\070\000\061\000\071\000\003\000\004\000\005\000\
\006\000\034\000\035\000\036\000\046\000\023\000\044\000\035\000\
\036\000\056\000\057\000\011\000\058\000\059\000\047\000\065\000\
\069\000\067\000\048\000\000\000\049\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\000\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\026\000\026\000\000\000\026\000\026\000\000\000\000\000\018\000\
\026\000\026\000\000\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\000\000\026\000\024\000\024\000\
\024\000\000\000\024\000\024\000\015\000\000\000\000\000\024\000\
\024\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\000\000\024\000\025\000\025\000\025\000\
\009\000\025\000\025\000\000\000\000\000\000\000\025\000\025\000\
\008\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\000\000\025\000\023\000\023\000\023\000\000\000\
\023\000\023\000\007\000\000\000\000\000\023\000\023\000\000\000\
\023\000\023\000\006\000\000\000\023\000\023\000\023\000\023\000\
\023\000\000\000\023\000\021\000\021\000\021\000\000\000\021\000\
\021\000\000\000\000\000\000\000\021\000\021\000\000\000\021\000\
\021\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
\000\000\021\000\022\000\022\000\022\000\000\000\022\000\022\000\
\000\000\000\000\000\000\022\000\022\000\000\000\022\000\022\000\
\000\000\000\000\022\000\022\000\022\000\022\000\022\000\000\000\
\022\000\020\000\020\000\020\000\000\000\020\000\020\000\000\000\
\000\000\005\000\020\000\020\000\000\000\005\000\005\000\000\000\
\000\000\020\000\020\000\020\000\020\000\020\000\000\000\020\000\
\014\000\014\000\005\000\000\000\000\000\014\000\014\000\000\000\
\000\000\000\000\000\000\000\000\014\000\014\000\014\000\014\000\
\014\000\000\000\014\000\013\000\013\000\000\000\000\000\000\000\
\013\000\013\000\000\000\000\000\000\000\000\000\000\000\013\000\
\013\000\013\000\013\000\013\000\000\000\013\000\010\000\010\000\
\000\000\000\000\000\000\010\000\010\000\000\000\000\000\000\000\
\000\000\000\000\010\000\010\000\010\000\010\000\010\000\000\000\
\010\000\011\000\011\000\000\000\000\000\000\000\011\000\011\000\
\000\000\000\000\000\000\000\000\000\000\011\000\011\000\011\000\
\011\000\011\000\000\000\011\000\012\000\012\000\000\000\000\000\
\000\000\012\000\012\000\000\000\000\000\000\000\000\000\000\000\
\012\000\012\000\012\000\012\000\012\000\000\000\012\000\017\000\
\017\000\000\000\000\000\000\000\017\000\017\000\000\000\000\000\
\000\000\000\000\000\000\017\000\017\000\017\000\017\000\017\000\
\000\000\017\000\018\000\018\000\000\000\000\000\000\000\018\000\
\018\000\000\000\000\000\000\000\000\000\000\000\018\000\018\000\
\018\000\018\000\018\000\000\000\018\000\000\000\000\000\015\000\
\015\000\000\000\000\000\000\000\015\000\015\000\000\000\000\000\
\000\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
\000\000\015\000\000\000\000\000\009\000\000\000\000\000\000\000\
\009\000\009\000\000\000\000\000\008\000\000\000\000\000\000\000\
\008\000\008\000\009\000\009\000\000\000\009\000\000\000\000\000\
\000\000\000\000\008\000\008\000\000\000\008\000\007\000\000\000\
\000\000\000\000\007\000\007\000\000\000\000\000\006\000\000\000\
\000\000\000\000\006\000\006\000\000\000\007\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000"

let yycheck = "\019\000\
\000\000\010\000\011\000\001\000\008\000\002\001\002\001\001\001\
\002\001\003\001\004\001\005\001\006\001\010\001\027\001\001\001\
\002\001\003\001\004\001\013\001\006\001\015\001\008\001\000\000\
\019\001\020\001\030\000\031\000\032\000\033\000\034\000\011\001\
\036\000\042\000\028\001\026\001\045\000\046\000\058\000\059\000\
\044\000\011\001\028\001\023\001\024\001\025\001\000\000\002\001\
\001\001\002\001\003\001\004\001\061\000\006\001\021\001\022\001\
\065\000\014\001\067\000\011\001\069\000\001\001\002\001\003\001\
\004\001\007\001\008\001\009\001\016\001\000\000\007\001\008\001\
\009\001\037\000\038\000\028\001\039\000\040\000\029\001\012\001\
\012\001\017\001\028\000\255\255\029\000\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\255\255\011\001\012\001\255\255\255\255\000\000\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\007\001\008\001\
\009\001\255\255\011\001\012\001\000\000\255\255\255\255\016\001\
\017\001\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\007\001\008\001\009\001\
\000\000\011\001\012\001\255\255\255\255\255\255\016\001\017\001\
\000\000\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\007\001\008\001\009\001\255\255\
\011\001\012\001\000\000\255\255\255\255\016\001\017\001\255\255\
\019\001\020\001\000\000\255\255\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\007\001\008\001\009\001\255\255\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\007\001\008\001\009\001\255\255\011\001\012\001\
\255\255\255\255\255\255\016\001\017\001\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\007\001\008\001\009\001\255\255\011\001\012\001\255\255\
\255\255\012\001\016\001\017\001\255\255\016\001\017\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\011\001\012\001\029\001\255\255\255\255\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\011\001\012\001\255\255\255\255\255\255\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\011\001\012\001\
\255\255\255\255\255\255\016\001\017\001\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\011\001\012\001\255\255\255\255\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\011\001\012\001\255\255\255\255\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\255\255\029\001\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\011\001\012\001\255\255\255\255\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\255\255\255\255\011\001\
\012\001\255\255\255\255\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\255\255\255\255\012\001\255\255\255\255\255\255\
\016\001\017\001\255\255\255\255\012\001\255\255\255\255\255\255\
\016\001\017\001\026\001\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\029\001\012\001\255\255\
\255\255\255\255\016\001\017\001\255\255\255\255\012\001\255\255\
\255\255\255\255\016\001\017\001\255\255\027\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\029\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  EOF\000\
  LET\000\
  LBRAC\000\
  SEMI\000\
  RBRAC\000\
  COLONCOLON\000\
  REC\000\
  EQ\000\
  IN\000\
  FUN\000\
  ARROW\000\
  IF\000\
  THEN\000\
  ELSE\000\
  BIN\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LT\000\
  LE\000\
  NE\000\
  AND\000\
  OR\000\
  LPAREN\000\
  RPAREN\000\
  "

let yynames_block = "\
  Num\000\
  Id\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 54 "nanoParse.mly"
                               ( Let (_2,_4,_6) )
# 340 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 55 "nanoParse.mly"
                                ( Letrec (_3,_5,_7) )
# 349 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Nano.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 56 "nanoParse.mly"
                                ( If (_2,_4,_6))
# 358 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 57 "nanoParse.mly"
                                ( Fun (_2,_4) )
# 366 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expa) in
    Obj.repr(
# 58 "nanoParse.mly"
                                (_1)
# 373 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expa) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expb) in
    Obj.repr(
# 60 "nanoParse.mly"
                                ( Bin(_1, Or,_3) )
# 381 "nanoParse.ml"
               : 'expa))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expb) in
    Obj.repr(
# 61 "nanoParse.mly"
                                ( _1 )
# 388 "nanoParse.ml"
               : 'expa))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expb) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expc) in
    Obj.repr(
# 63 "nanoParse.mly"
                                ( Bin(_1, And,_3) )
# 396 "nanoParse.ml"
               : 'expb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expc) in
    Obj.repr(
# 64 "nanoParse.mly"
                                ( _1 )
# 403 "nanoParse.ml"
               : 'expb))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expec) in
    Obj.repr(
# 66 "nanoParse.mly"
                                 ( Bin(_1, Lt,_3) )
# 411 "nanoParse.ml"
               : 'expc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expec) in
    Obj.repr(
# 67 "nanoParse.mly"
                                 ( Bin(_1, Le,_3) )
# 419 "nanoParse.ml"
               : 'expc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expec) in
    Obj.repr(
# 68 "nanoParse.mly"
                                 ( Bin(_1, Ne,_3) )
# 427 "nanoParse.ml"
               : 'expc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expec) in
    Obj.repr(
# 69 "nanoParse.mly"
                                 ( Bin(_1,Eq,_3) )
# 435 "nanoParse.ml"
               : 'expc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expec) in
    Obj.repr(
# 70 "nanoParse.mly"
                                 ( _1 )
# 442 "nanoParse.ml"
               : 'expc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expec) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expec) in
    Obj.repr(
# 72 "nanoParse.mly"
                                     ( Bin(_2,Cons,_4) )
# 450 "nanoParse.ml"
               : 'expec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expec) in
    Obj.repr(
# 73 "nanoParse.mly"
                                     ( Bin(_1,Cons,NilExpr) )
# 457 "nanoParse.ml"
               : 'expec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expec) in
    Obj.repr(
# 74 "nanoParse.mly"
                                     (Bin(_1,Cons,_3))
# 465 "nanoParse.ml"
               : 'expec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expec) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expec) in
    Obj.repr(
# 75 "nanoParse.mly"
                                     (Bin(_1,Cons,_3))
# 473 "nanoParse.ml"
               : 'expec))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "nanoParse.mly"
                                     (NilExpr)
# 479 "nanoParse.ml"
               : 'expec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expd) in
    Obj.repr(
# 77 "nanoParse.mly"
                                     (_1)
# 486 "nanoParse.ml"
               : 'expec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expe) in
    Obj.repr(
# 79 "nanoParse.mly"
                               ( Bin(_1, Plus,_3) )
# 494 "nanoParse.ml"
               : 'expd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expe) in
    Obj.repr(
# 80 "nanoParse.mly"
                                ( Bin(_1, Minus ,_3) )
# 502 "nanoParse.ml"
               : 'expd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expe) in
    Obj.repr(
# 81 "nanoParse.mly"
                                ( _1 )
# 509 "nanoParse.ml"
               : 'expd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expe) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expf) in
    Obj.repr(
# 83 "nanoParse.mly"
                                ( Bin(_1, Mul,_3) )
# 517 "nanoParse.ml"
               : 'expe))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expe) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expf) in
    Obj.repr(
# 84 "nanoParse.mly"
                                ( Bin(_1, Div,_3) )
# 525 "nanoParse.ml"
               : 'expe))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expf) in
    Obj.repr(
# 85 "nanoParse.mly"
                                ( _1 )
# 532 "nanoParse.ml"
               : 'expe))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expf) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expg) in
    Obj.repr(
# 87 "nanoParse.mly"
                                ( App (_1,_2) )
# 540 "nanoParse.ml"
               : 'expf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expg) in
    Obj.repr(
# 88 "nanoParse.mly"
                                (_1)
# 547 "nanoParse.ml"
               : 'expf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "nanoParse.mly"
                                ( Const _1 )
# 554 "nanoParse.ml"
               : 'expg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "nanoParse.mly"
                                ( Var(_1) )
# 561 "nanoParse.ml"
               : 'expg))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "nanoParse.mly"
                                ( True )
# 567 "nanoParse.ml"
               : 'expg))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "nanoParse.mly"
                                ( False )
# 573 "nanoParse.ml"
               : 'expg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    Obj.repr(
# 94 "nanoParse.mly"
                                ( _2 )
# 580 "nanoParse.ml"
               : 'expg))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Nano.expr)
